/*

******** Created by yutao-ma on 2017/6/8 *********

*/


CREATE DATABASE GAMEINFO

USE GAMEINFO

GO

DROP TABLE USERS
CREATE TABLE USERS
(
	USERS_ID			CHAR(8)		NOT NULL	PRIMARY KEY,
	USERS_NAME			CHAR(8)		NOT NULL,
	USERS_PHONENUMBER	CHAR(11)	NOT NULL,
	USERS_EMAIL			CHAR(20)	NOT NULL,
	USERS_REGISTER		CHAR(10)	NOT NULL,
	USERS_AGE			INTEGER		NOT NULL

);


INSERT INTO USERS VALUES('N1', '赵亦',  '13913913399', 'ZHAOYI@163.com', '2017.1.1', 18);





DROP TABLE FAVORITE
CREATE TABLE FAVORITE
(
	FAV_ID		CHAR(8)		NOT NULL	PRIMARY KEY,
	USEERS_ID	CHAR(8)		NOT NULL,
	FAV_AMOUNT	INTEGER		NOT NULL
);

INSERT INTO FAVORITE VALUES('FN1', 'N1', 4);






DROP TABLE COLLECT
CREATE TABLE COLLECT
(
	FAV_ID			CHAR(8)		NOT NULL,
	GAME_ID			CHAR(8)		NOT NULL	PRIMARY KEY(FAV_ID, GAME_ID),
	COLLECT_TIME	CHAR(8)		NOT NULL
);

INSERT INTO COLLECT VALUES('FN1', 'GN1', '2017.1.2');




DROP TABLE GAME 
CREATE TABLE GAME
(
	GAME_ID			CHAR(8)		NOT NULL	PRIMARY KEY,
	GAME_NAME		CHAR(20)	NOT NULL,
	GAME_CATEGORY	CHAR(8)		NOT NULL,
	GAME_GRADE		INTEGER		NOT NULL,
	GAME_COMPANY	CHAR(20),
	GAME_SIZE		CHAR(8)		NOT NULL,
	GAME_ONLINE		CHAR(8)		NOT NULL,
	GAME_VERSION	CHAR(8)		NOT NULL
);


INSERT INTO GAME VALUES('GN1', 'Final Fantasy', 'RPG', 5, 'Square Enix Company', '55 MB', '1987', '1.1');





DROP TABLE GROUPS
CREATE TABLE GROUPS
(
	GROUPS_ID		CHAR(8)		NOT NULL	PRIMARY KEY,
	GROUPS_NAME		CHAR(20)	NOT NULL,
	GAME_ID			CHAR(8)		NOT NULL,
	GROUPS_AMOUNT	INTEGER		NOT NULL
);


INSERT INTO GROUPS VALUES('GPN1', 'Final lovers', 'GN1', 20);




DROP TABLE JOINING
CREATE TABLE JOINING
(
	USERS_ID		CHAR(8)		NOT NULL,
	GROUPS_ID		CHAR(8)		NOT NULL	PRIMARY KEY(USERS_ID, GROUPS_ID),
	JOIN_TIME		CHAR(8)		NOT NULL,
	JOIN_POSITION	CHAR(8)		NOT NULL
)

INSERT INTO JOINING VALUES('N1', 'GPN1', '2017.1.3', 'Leader');



DROP TABLE ARTICLE
CREATE TABLE ARTICLE
(
	A_ID		CHAR(8)		NOT NULL	PRIMARY KEY,
	A_NAME		CHAR(30)	NOT NULL,
	A_TIME		CHAR(8)		NOT NULL,
	GROUPS_ID	CHAR(8)		NOT NULL,
	A_AMOUNT	INTEGER		NOT NULL

);

INSERT INTO ARTICLE VALUES('AN1', 'How to play Final Fantasy', '2017.1.4', 'GPN1', 5698);



DROP TABLE CONSULT
CREATE TABLE CONSULT
(
	USERS_ID		CHAR(8)		NOT NULL,
	A_ID			CHAR(8)		NOT NULL	PRIMARY KEY(USERS_ID, A_ID),
	CONSULT_TIME	CHAR(8)		NOT NULL
);


INSERT INTO	CONSULT VALUES('N1', 'AN1', '2017.1.5')



DROP TABLE CHECKING
CREATE TABLE CHECKING
(
	USERS_ID			CHAR(8)		NOT NULL,
	GAME_ID			CHAR(8)		NOT NULL	PRIMARY KEY(USERS_ID, GAME_ID),
	CHECK_TIME		CHAR(8)		NOT NULL
);


INSERT	INTO CHECKING VALUES('N1', 'GN1', '2017.1.6')



DROP TABLE FEEDBACK
CREATE TABLE FEEDBACK
(
	F_ID 		CHAR(8)		NOT NULL	PRIMARY KEY,
	USERS_ID	CHAR(8)		NOT NULL,
	F_TYPE		CHAR(8)		NOT NULL,
	F_STATUS	CHAR(8)		NOT NULL
);

INSERT INTO FEEDBACK VALUES('FN1', 'N1', 'Problems', 'Solved')








/*
以
下
为
查
询
部
分
*/

--1. 查询所有用户的用户名，电话和年龄
SELECT USER_NAME, USER_PHONENUMBER, USER_AGE
FROM USER;

--2. 查询所有用户的全部信息。
SELECT *
FROM USER;



--3. 查询所有游戏的名字，其中名称用别名name显示
SELECT GAME_NAME AS name
FROM GAME;

--4. 查询小组编号为GPN1所发布的测评名
SELECT A_NAME
FROM ARTICLE
WHERE GROUP_ID = 'GPN1';


--5. 查询撰写的测评字数在5000至10000的小组编号和小组名称
SELECT ARTICLE.GROUPS_ID, GROUPS_NAME
FROM ARTICLE, GROUPS
WHERE ARTICLE.GROUPS_ID = GROUPS.GROUPS_ID AND A_AMOUNT BETWEEN 5000 AND 10000;

--6. 查询没有撰写过测评的小组名称，并用别名InactiveGroups显示
SELECT GROUPS_NAME AS InactiveGroups
FROM ARTICLE, GROUPS
WHERE ARTICLE.GROUPS_ID = GROUPS.GROUPS_ID AND NOT GROUPS.GROUPS_ID IN (SELECT DISTINCT GROUPS_ID
				  														FROM ARTICLE);  
--7. 查询不是由公司开发的游戏名称
SELECT GAME_NAME
FROM GAME 
WHERE GAME_COMPANY IS NULL;

--8. 求在2017年之后注册的用户的平均年龄,并用别名AVG_AGE显示。
SELECT AVG(USERS_AGE) AS AVG_AGE
FROM USERS
WHERE USERS_REGISTER = '2017%';

--9. 求被用户查询次数在2次以上的游戏的名称以及被查询次数，查询次数结果按降序列出。
SELECT GAME_NAME, COUNT(*) AS TOTAL                                   
FROM GAME, CHECKING 
WHERE GAME.GAME_ID = CHECKING.GAME_ID
GROUP BY GAME_ID
HAVING COUNT(*) > 2
ORDER BY TOTAL DESC;


--10. 把名为empty的测评名改为 how to don’t starve
UPDATE ARTICLE
SET A_NAME = 'how to play don\’t starve'
WHERE A_NAME = 'empty';



--11. 创建一个小组人数大于10人的视图SUB_GROUPS。
DROP VIEW SUB_GROUPS;
CREATE VIEW SUB_GROUPS AS
SELECT GROUPS_ID, GROUPS_NAME, GAME_ID, GROUPS_AMOUNT
FROM GROUPS
WHERE GROUPS_AMOUNT > 10;



--12. 在游戏表中删除一个游戏时，将小组表中以这个游戏为主题的小组也删除
CREATE TRIGGER Game_delete
ON GAME 
AFTER DELETE 
AS
DELETE FROM GROUPS
WHERE GAME_ID = DELETE.GAME_ID


